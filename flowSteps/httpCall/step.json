{
	"label": "HTTP call",
	"name": "httpCall",
	"category": "integrations",
	"description": "This flow step will send generic request",
	"inputs": [
		{
			"label": "Method",
			"name": "method",
			"type": "dropDown",
			"description": "Select method",
			"multiplicity": "one",
			"defaultValue": [
				"get"
			],
			"options": {
				"possibleValues": [
					{
						"label": "Get",
						"name": "get"
					},
					{
						"label": "Post",
						"name": "post"
					},
					{
						"label": "Put",
						"name": "put"
					},
					{
						"label": "Delete",
						"name": "delete"
					},
					{
						"label": "Connect",
						"name": "connect"
					},
					{
						"label": "Head",
						"name": "head"
					},
					{
						"label": "Options",
						"name": "options"
					},
					{
						"label": "Patch",
						"name": "patch"
					},
					{
						"label": "Trace",
						"name": "trace"
					}
				],
				"allowContextSelector": "false"
			}
		},
		{
			"label": "URL",
			"name": "url",
			"description": "The base URL where this endpoint will send request to. Add path variables in Url if required",
			"type": "text",
			"required": "true",
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Headers",
			"name": "headers",
			"description": "The headers have the 'key=value' form, per example: key=ABC123",
			"type": "text",
			"multiplicity": "many",
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Params",
			"name": "params",
			"description": "The params have the 'key=value' form, per example: key=ABC123",
			"type": "text",
			"multiplicity": "many",
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Body",
			"name": "body",
			"type": "json",
			"required": "['post', 'put', 'patch'].includes(config.method)",
			"visibility": "['post', 'put', 'patch'].includes(config.method)",
			"description": "This is used to set body request",
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Requires callback",
			"name": "requiresCallBack",
			"type": "boolean",
			"description": "If true it will return callback",
			"defaultValue": false,
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Callback data",
			"name": "callbackData",
			"type": "json",
			"description": "This is an object you can send that you will get back when the callback is processed",
			"visibility": "config.requiresCallBack",
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Callbacks",
			"name": "callbacks",
			"type": "script",
			"description": "This is a map where you can listener for different callbacks",
			"visibility": "config.requiresCallBack",
			"options": {
				"allowContextSelector": "false",
				"parameters": ["event","data"]
			}
		},
		{
			"label": "Settings",
			"type": "label"
		},
		{
			"label": "Follow Redirects",
			"name": "followRedirects",
			"type": "boolean",
			"description": "Follow the redirects when a HTTP request is executed",
			"visibility": "config.settings",
			"defaultValue": false,
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Download",
			"name": "download",
			"type": "boolean",
			"description": "Determines if the HTTP resource will be downloaded",
			"visibility": "config.settings",
			"defaultValue": false,
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Full Response",
			"name": "fullResponse",
			"type": "boolean",
			"description": "Include extended information about response",
			"visibility": "config.settings",
			"defaultValue": false,
			"options": {
				"allowContextSelector": "false"
			}
		},
		{
			"label": "Connection timeout",
			"name": "connectionTimeout",
			"description": "Connect timeout interval, in milliseconds (0 = infinity). Default value: 5000 ms (5 sec)",
			"type": "text",
			"defaultValue": "5000",
			"visibility": "config.settings",
			"typeOptions": {
				"validation": {
					"function": "!config.connectionTimeout || utils.isPlaceholder(config.connectionTimeout) || utils.getInteger(config.connectionTimeout) >= 0",
					"message": "The time must be a valid placeholder or a positive integer greater than or equal to 0. "
				}
			}
		},
		{
			"label": "Read timeout",
			"name": "readTimeout",
			"description": "Read timeout interval, in milliseconds (0 = infinity). Default value: 60000 ms (60 sec)",
			"type": "text",
			"defaultValue": "60000",
			"visibility": "config.settings",
			"typeOptions": {
				"validation": {
					"function": "!config.readTimeout || utils.isPlaceholder(config.readTimeout) || utils.getInteger(config.readTimeout) >= 0",
					"message": "The time must be a valid placeholder or a positive integer greater than or equal to 0. "
				}
			}
		}
	],
	"outputs": [
		{
			"label": "Response",
			"name": "response",
			"type": "object",
			"description": "The response to external URL"
		}
	]
}